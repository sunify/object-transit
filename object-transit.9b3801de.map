{"version":3,"sources":["node_modules/run-with-fps/index.js","node_modules/tweeen/src/index.js","node_modules/rgb-hex/index.js","node_modules/hex-rgb/index.js","src/index.js","index.js"],"names":["module","exports","red","green","blue","alpha","isPercent","toString","includes","res","match","map","Number","undefined","parseFloat","TypeError","Math","round","slice","hexChars","match3or4Hex","match6or8Hex","nonHexChars","RegExp","validHexSize","hex","options","test","replace","length","parseInt","substring","repeat","num","format","hexColorRegex","rgbColorRegex","rgbaColorRegex","lerp","start","end","percent","lerpArray","n","i","types","number","parse","a","prepare","interpolate","hexColor","c","v","rgbHex","rgbColor","join","rgbaColor","getValueType","Object","keys","find","key","transit","source","cb","state","currentTweeen","proxy","Proxy","get","obj","prop","hasOwnProperty","instance","assign","target","stop","to","duration","easing","targetKeys","filter","forEach","keyTypes","reduce","acc","type","patch","document","getElementById","jsonInput","resultInput","applyStyle","style","transform","left","scale","color","background","bg1","bg2","innerText","count","value","JSON","stringify","initial","blockStyle","console","log","transitOptions","fps","t","prevValue","addEventListener"],"mappings":"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","file":"object-transit.9b3801de.map","sourceRoot":"..","sourcesContent":["module.exports = function runWithFPS (fn, fps) {\n  var interval = 1000 / fps;\n  var then = Date.now();\n  var stopped = false;\n\n  function run() {\n    if (!stopped) {\n      requestAnimationFrame(run);\n    }\n\n    var now = Date.now();\n    var delta = now - then;\n\n    if (delta > interval && !stopped) {\n      then = now - (delta % interval);\n      fn(now);\n    }\n  };\n\n  requestAnimationFrame(run);\n  fn(Date.now());\n\n  return function() {\n    stopped = true;\n  }\n};","var runWithFps = require('run-with-fps');\n\nfunction linear(a) {\n  return a;\n}\n\nfunction tween(from, to, cb, params) {\n  params = params || {};\n  var duration = params.duration || 300;\n  var easing = params.easing || linear;\n  var fps = params.fps || 60;\n  var end = params.end;\n\n  var stopped = false;\n  var start = Date.now();\n\n  var stop = runWithFps(function() {\n    var spent = Math.min(Date.now() - start, duration);\n    cb(from + (to - from) * easing(spent / duration));\n    if (spent === duration || stopped) {\n      stop();\n      if (typeof end === 'function') {\n        end();\n      }\n    }\n  }, fps);\n\n  return function() {\n    stopped = true;\n  };\n}\n\nmodule.exports = tween;\n","'use strict';\n/* eslint-disable no-mixed-operators */\nmodule.exports = (red, green, blue, alpha) => {\n\tconst isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string') {\n\t\tconst res = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(Number);\n\t\t// TODO: use destructuring when targeting Node.js 6\n\t\tred = res[0];\n\t\tgreen = res[1];\n\t\tblue = res[2];\n\t\talpha = res[3];\n\t} else if (alpha !== undefined) {\n\t\talpha = parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1);\n\t} else {\n\t\talpha = '';\n\t}\n\n\treturn ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n};\n","'use strict';\n\nconst hexChars = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexChars}]{3}[${hexChars}]?`;\nconst match6or8Hex = `#?[${hexChars}]{6}([${hexChars}]{2})?`;\n\nconst nonHexChars = new RegExp(`[^#${hexChars}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nmodule.exports = function (hex, options = {}) {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alpha = 255;\n\n\tif (hex.length === 8) {\n\t\talpha = parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.substring(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talpha = parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.substring(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst num = parseInt(hex, 16);\n\tconst red = num >> 16;\n\tconst green = (num >> 8) & 255;\n\tconst blue = num & 255;\n\n\treturn options.format === 'array' ?\n\t\t[red, green, blue, alpha] :\n\t\t{red, green, blue, alpha};\n};\n","import tweeen from 'tweeen';\nimport rgbHex from 'rgb-hex';\nimport hexRgb from 'hex-rgb';\n\nconst hexColorRegex = /^#(?=[0-9a-fA-F]*$)(?:.{3}|.{6})$/;\nconst rgbColorRegex = /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/;\nconst rgbaColorRegex = /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d+(?:\\.\\d+)?)\\)$/;\n\nconst lerp = (start, end, percent) => start + (end - start) * percent;\nconst lerpArray = (start, end, percent) => start.map((n, i) => lerp(n, end[i], percent));\n\nconst types = {\n  number: {\n    test: n => typeof n === 'number',\n    parse: a => a,\n    prepare: a => a,\n    interpolate: lerp,\n  },\n  hexColor: {\n    test: c => hexColorRegex.test(c),\n    parse: v => hexRgb(v, { format: 'array' }).slice(0, 3),\n    prepare: v => `#${rgbHex(...v)}`,\n    interpolate: lerpArray,\n  },\n  rgbColor: {\n    test: c => rgbColorRegex.test(c),\n    parse: v => v.match(rgbColorRegex).slice(1, 4).map(Number),\n    prepare: v => `rgb(${v.map(Math.round).join(', ')})`,\n    interpolate: lerpArray,\n  },\n  rgbaColor: {\n    test: c => rgbaColorRegex.test(c),\n    parse: v => v.match(rgbaColorRegex).slice(1, 5).map(Number),\n    prepare: v => `rgba(${v.slice(0, 3).map(Math.round).join(', ')}, ${v[3]})`,\n    interpolate: lerpArray,\n  },\n}\n\nconst getValueType = v => {\n  return Object.keys(types).find(key => types[key].test(v));\n}\n\nexport default function transit(source, cb) {\n  const state = { ...source };\n  let currentTweeen;\n\n  const proxy = new Proxy(state, {\n    get(obj, prop) {\n      if (obj.hasOwnProperty(prop)) {\n        return obj[prop];\n      }\n\n      return instance[prop];\n    }\n  });\n\n  const instance = {\n    assign(target) {\n      Object.assign(state, target);\n      if (typeof cb === 'function') {\n        cb(state);\n      }\n      return proxy;\n    },\n    stop() {\n      if (currentTweeen) {\n        currentTweeen();\n        currentTweeen = undefined;\n      }\n    },\n    to(target, { duration = 300, easing, end, ...options } = {}) {\n      const targetKeys = Object.keys(target).filter(key => getValueType(target[key]) !== undefined);\n      const keys = targetKeys.filter(key => getValueType(state[key]) !== undefined);\n\n      targetKeys.filter(key => getValueType(state[key]) === undefined).forEach(key => {\n        state[key] = target[key];\n      });\n\n      const keyTypes = (\n        keys\n          .reduce((acc, key) => {\n            const type = getValueType(state[key]);\n            acc[key] = {\n              type,\n              start: types[type].parse(state[key]),\n              end: types[type].parse(target[key]),\n            }\n\n            return acc;\n          }, {})\n      );\n\n      this.stop();\n\n      currentTweeen = tweeen(0, 1, (percent) => {\n        const patch = {};\n        keys.forEach(key => {\n          const { type, start, end } = keyTypes[key];\n          patch[key] = types[type].prepare(\n            types[type].interpolate(start, end, percent)\n          );\n        });\n        Object.assign(state, patch);\n        if (typeof cb === 'function') {\n          cb(state);\n        }\n      }, {\n        ...options,\n        duration,\n        easing,\n        end: typeof end === 'function' && (() => {\n          end(state);\n        }),\n      });\n\n      return proxy;\n    }\n  };\n\n  return proxy;\n}","import transit from './src/index';\n\nconst obj = document.getElementById('obj');\nconst jsonInput = document.getElementById('json');\nconst resultInput = document.getElementById('result');\n\nconst applyStyle = (style) => {\n  obj.style.transform = `translate(${style.left}px, 40px) scale(${style.scale})`;\n  obj.style.color = style.color || '#000';\n  obj.style.background = `linear-gradient(${style.bg1}, ${style.bg2})`;\n  obj.innerText = Math.round(style.count);\n  resultInput.value = JSON.stringify(style, undefined, 2);\n};\n\nconst initial = JSON.parse(jsonInput.value);\nconst blockStyle = transit(initial, applyStyle);\napplyStyle(initial);\nconsole.log(blockStyle);\n\nconst transitOptions = {\n  duration: 300,\n  fps: 60,\n  easing: t => t<.5 ? 2*t*t : -1+(4-2*t)*t,\n};\n\nlet prevValue = jsonInput.value;\njsonInput.addEventListener('keyup', () => {\n  if (prevValue !== jsonInput.value) {\n    blockStyle.to(JSON.parse(jsonInput.value), transitOptions);\n    prevValue = jsonInput.value;\n  }\n});"]}